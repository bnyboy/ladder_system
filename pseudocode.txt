Overview:

1) Initialising:

Import list of players/teams

Import previous results

Set variables such as whether replays are allowed, factors for scaling rating etc

2) Rating calculations

for each previous result
    update rating of players involved
    update cost matrix - add cost associated with replaying the same players
    
for each player
    for each other player
        update cost matrix based on difference in rating
        update cost matrix based on any other factors
        

3) determine next round of matches, depth-first tree search
set size of match (i.e. number of players involved - default is 2)

recursive (generator) function:
input: list of teams no in matches yet, cost matrix, current match

if no current match:
    add first team from list to current match, remove it from list of teams

if no teams left:
    accept current match, save score (check if best score?), go back up a level in recursion

for each team in list of teams:
    add team to current match, then:
        calculate match score based on teams in it so far
        only proceed if score is still less than best total found so far
            go down a level in recursion
            CALL FUNCTION AGAIN, passing just the remaining teams
             - with current match if incomplete
             - with no match if current match full
            [handle returned values from coming back up]

function to calculate cost of match:
    calculate cost between each pair of players
    sum this - so that cost always increases as players are added to match

4) return best round as list of players and matchups

